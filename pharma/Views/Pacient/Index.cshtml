@model IEnumerable<pharma.Models.Pacient>

@{
    ViewData["Title"] = "Lista pacienți";
    
    // Pagination parameters
    var currentPage = int.TryParse(Context.Request.Query["page"], out var p) ? p : 1;
    var pageSize = 2;
    var totalItems = Model.Count();
    var totalPages = (int)Math.Ceiling(totalItems / (double)pageSize);
    var pagedItems = Model.OrderBy(p => p.Nume).ThenBy(p => p.Prenume).Skip((currentPage - 1) * pageSize).Take(pageSize);
}

<!-- Header cu gradient și statistici -->
<div class="page-header-gradient mb-4">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h2 class="mb-2 text-white">
                <i class="fas fa-users me-2"></i>
                Listă Pacienți
            </h2>
            <div class="d-flex gap-3">
                <div class="stat-card-mini">
                    <div class="stat-number">@totalItems</div>
                    <div class="stat-label">Total pacienți</div>
                </div>
                <div class="stat-card-mini">
                    <div class="stat-number">@currentPage</div>
                    <div class="stat-label">Pagina @currentPage din @totalPages</div>
                </div>
            </div>
        </div>
        <a asp-action="Create" class="btn btn-light btn-lg shadow-sm">
            <i class="fas fa-user-plus me-2"></i> Pacient nou
        </a>
    </div>
</div>

<!-- Căutare și filtrare -->
<div class="card border-0 shadow-sm mb-4">
    <div class="card-body">
        <div class="row g-3">
            <div class="col-md-4">
                <div class="search-box">
                    <i class="fas fa-search search-icon"></i>
                    <input type="text" id="searchGeneral" class="form-control form-control-lg ps-5"
                           placeholder="Caută pacient (nume, prenume, CNP, telefon...)">
                </div>
            </div>
            <div class="col-md-3">
                <select id="filterMedicament" class="form-select form-select-lg">
                    <option value="">🏥 Toate medicamentele</option>
                    @{
                        var allMedicaments = Model.SelectMany(p => p.PacientMedicamente.Select(pm => pm.Medicament))
                        .Distinct()
                        .OrderBy(m => m.Nume);
                    }
                    @foreach (var med in allMedicaments)
                    {
                        <option value="@med.Id">@med.Nume</option>
                    }
                </select>
            </div>
            <div class="col-md-2">
                <select id="filterRetete" class="form-select form-select-lg">
                    <option value="">📋 Toți pacienții</option>
                    <option value="cu-retete">✅ Cu rețete</option>
                    <option value="fara-retete">⚠️ Fără rețete</option>
                </select>
            </div>
            <div class="col-md-2">
                <select id="sortBy" class="form-select form-select-lg">
                    <option value="nume-asc">📝 Nume (A-Z)</option>
                    <option value="nume-desc">📝 Nume (Z-A)</option>
                    <option value="retete-desc">📋 Cele mai multe rețete</option>
                    <option value="retete-asc">📋 Cele mai puține rețete</option>
                    <option value="recent">🆕 Adăugați recent</option>
                </select>
            </div>
            <div class="col-md-1">
                <button type="button" id="clearFilters" class="btn btn-outline-secondary btn-lg w-100" title="Șterge filtrele">
                    <i class="fas fa-eraser"></i>
                </button>
            </div>
        </div>

        <!-- Quick Stats Pills -->
        <div class="mt-3 d-flex flex-wrap gap-2">
            <span class="badge rounded-pill bg-gradient-primary px-3 py-2">
                <i class="fas fa-check-circle me-1"></i>
                @Model.Count(p => p.Retete.Any()) cu rețete active
            </span>
            <span class="badge rounded-pill bg-gradient-info px-3 py-2">
                <i class="fas fa-pills me-1"></i>
                @Model.Count(p => p.PacientMedicamente.Any()) cu medicamente
            </span>
            <span class="badge rounded-pill bg-gradient-success px-3 py-2">
                <i class="fas fa-calendar-check me-1"></i>
                @Model.Count(p => p.Retete.Any(r => r.DataUrmatoareiVizite.HasValue && r.DataUrmatoareiVizite > DateTime.Now)) cu vizite programate
            </span>
            <span class="badge rounded-pill bg-gradient-secondary px-3 py-2" id="statsVisible">
                <i class="fas fa-eye me-1"></i>
                Afișând @pagedItems.Count() din @totalItems
            </span>
        </div>
    </div>
</div>

<!-- Lista pacienți în format tabel -->
<div class="card border-0 shadow-sm">
    <div class="card-body p-0">
        <div class="table-responsive">
            <table class="table table-hover mb-0" id="patientsTable">
                <thead style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;">
                    <tr>
                        <th class="text-white border-0" width="5%"><i class="fas fa-user"></i></th>
                        <th class="text-white border-0" width="25%">Pacient</th>
                        <th class="text-white border-0" width="15%">Contact</th>
                        <th class="text-white border-0" width="20%">Medicamente</th>
                        <th class="text-white border-0 text-center" width="10%">Rețete</th>
                        <th class="text-white border-0" width="15%">Următoarea vizită</th>
                        <th class="text-white border-0 text-center" width="10%">Acțiuni</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var pacient in pagedItems)
                    {
                        var urmatoareaVizita = pacient.Retete
                        .Where(r => r.DataUrmatoareiVizite.HasValue)
                        .OrderBy(r => r.DataUrmatoareiVizite.Value)
                        .FirstOrDefault();

                        <tr class="patient-row"
                            data-id="@pacient.Id"
                            data-nume="@pacient.Nume.ToLower()"
                            data-prenume="@pacient.Prenume.ToLower()"
                            data-cnp="@(pacient.CNP ?? "")"
                            data-telefon="@(pacient.NrTelefon ?? "")"
                            data-medicamente="@string.Join(",", pacient.PacientMedicamente.Select(pm => pm.MedicamentId))"
                            data-retete-count="@pacient.Retete.Count"
                            data-next-visit="@(urmatoareaVizita?.DataUrmatoareiVizite?.ToString("yyyy-MM-dd") ?? "")"
                            data-has-retete="@(pacient.Retete.Any() ? "true" : "false")">

                            <!-- Avatar -->
                            <td>
                                <div class="patient-avatar">
                                    <span class="badge bg-gradient-primary rounded-pill">
                                        @pacient.Nume.Substring(0, 1)@pacient.Prenume.Substring(0, 1)
                                    </span>
                                </div>
                            </td>

                            <!-- Pacient Info -->
                            <td>
                                <div>
                                    <h6 class="mb-0">@pacient.Nume @pacient.Prenume</h6>
                                    @if (!string.IsNullOrEmpty(pacient.CNP))
                                    {
                                        <small class="text-muted">CNP: @pacient.CNP</small>
                                    }
                                </div>
                            </td>

                            <!-- Contact -->
                            <td>
                                @if (!string.IsNullOrEmpty(pacient.NrTelefon))
                                {
                                    <span class="badge bg-light text-dark">
                                        <i class="fas fa-phone me-1"></i>
                                        @pacient.NrTelefon
                                    </span>
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            </td>

                            <!-- Medicamente -->
                            <td>
                                @if (pacient.PacientMedicamente.Any())
                                {
                                    <div class="d-flex flex-wrap gap-1">
                                        @foreach (var pm in pacient.PacientMedicamente.Take(2))
                                        {
                                            <span class="badge bg-info">@pm.Medicament.Nume</span>
                                        }
                                        @if (pacient.PacientMedicamente.Count > 2)
                                        {
                                            <span class="badge bg-secondary">+@(pacient.PacientMedicamente.Count - 2)</span>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <span class="text-muted">Fără medicamente</span>
                                }
                            </td>

                            <!-- Rețete Count -->
                            <td class="text-center">
                                <span class="badge @(pacient.Retete.Count > 0 ? "bg-success" : "bg-secondary") rounded-pill px-3">
                                    @pacient.Retete.Count
                                </span>
                            </td>

                            <!-- Următoarea vizită -->
                            <td>
                                @if (urmatoareaVizita != null)
                                {
                                    var vizitaData = urmatoareaVizita.DataUrmatoareiVizite.Value;
                                    var classCuloare = vizitaData <= DateTime.Now.AddDays(3) ? "text-warning" : "text-info";
                                    <span class="@classCuloare">
                                        <i class="fas fa-calendar-alt me-1"></i>
                                        @vizitaData.ToString("dd.MM.yyyy")
                                    </span>
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            </td>

                            <!-- Acțiuni -->
                            <td class="text-center">
                                <div class="btn-group" role="group">
                                    <button class="btn btn-outline-primary btn-sm"
                                            onclick="showPatientDetails(@pacient.Id)"
                                            title="Vezi detalii">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <a asp-action="Edit" asp-route-id="@pacient.Id"
                                       class="btn btn-outline-warning btn-sm"
                                       title="Editează">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    
    <!-- Pagination -->
    @if (totalPages > 1)
    {
        <div class="card-footer bg-light">
            <nav aria-label="Paginare">
                <ul class="pagination justify-content-center mb-0">
                    @if (currentPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { page = currentPage - 1 })">
                                <i class="fas fa-angle-left me-1"></i> Anterior
                            </a>
                        </li>
                    }
                    
                    @{
                        var startPage = Math.Max(1, currentPage - 2);
                        var endPage = Math.Min(totalPages, currentPage + 2);
                    }
                    
                    @if (startPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { page = 1 })">1</a>
                        </li>
                        @if (startPage > 2)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }
                    }
                    
                    @for (int i = startPage; i <= endPage; i++)
                    {
                        <li class="page-item @(i == currentPage ? "active" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { page = i })">@i</a>
                        </li>
                    }
                    
                    @if (endPage < totalPages)
                    {
                        @if (endPage < totalPages - 1)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { page = totalPages })">@totalPages</a>
                        </li>
                    }
                    
                    @if (currentPage < totalPages)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { page = currentPage + 1 })">
                                Următoarea <i class="fas fa-angle-right ms-1"></i>
                            </a>
                        </li>
                    }
                </ul>
            </nav>
            
            <!-- Pagination info -->
            <div class="text-center mt-2 text-muted small">
                Afișând @((currentPage - 1) * pageSize + 1) - @(Math.Min(currentPage * pageSize, totalItems)) din @totalItems pacienți
            </div>
        </div>
    }
</div>

<!-- No results message -->
<div id="noResults" class="text-center py-5 d-none">
    <div class="empty-state">
        <i class="fas fa-search fa-4x text-muted mb-3"></i>
        <h4 class="text-muted">Nu au fost găsiți pacienți</h4>
        <p class="text-muted">Încearcă să modifici criteriile de căutare</p>
    </div>
</div>

<!-- Modal pentru detalii pacient -->
<div class="modal fade" id="patientDetailsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-user me-2"></i>
                    Detalii pacient
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="patientDetailsContent">
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Se încarcă...</span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Închide</button>
                <button type="button" id="editPatientBtn" class="btn btn-primary">
                    <i class="fas fa-edit me-1"></i> Editează pacientul
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const searchGeneral = document.getElementById('searchGeneral');
            const filterMedicament = document.getElementById('filterMedicament');
            const filterRetete = document.getElementById('filterRetete');
            const sortBy = document.getElementById('sortBy');
            const clearFilters = document.getElementById('clearFilters');
            const patientRows = document.querySelectorAll('.patient-row');
            const patientsTable = document.getElementById('patientsTable');
            const noResults = document.getElementById('noResults');

            function filterAndSort() {
                const searchTerm = searchGeneral.value.toLowerCase();
                const medicamentId = filterMedicament.value;
                const reteteFiler = filterRetete.value;
                const sortValue = sortBy.value;

                let visibleRows = [];

                patientRows.forEach(row => {
                    let visible = true;

                    // General search
                    if (searchTerm) {
                        const nume = row.dataset.nume;
                        const prenume = row.dataset.prenume;
                        const cnp = row.dataset.cnp;
                        const telefon = row.dataset.telefon;

                        if (!nume.includes(searchTerm) &&
                            !prenume.includes(searchTerm) &&
                            !cnp.includes(searchTerm) &&
                            !telefon.includes(searchTerm)) {
                            visible = false;
                        }
                    }

                    // Medicament filter
                    if (medicamentId && visible) {
                        const medicamente = row.dataset.medicamente.split(',');
                        if (!medicamente.includes(medicamentId)) {
                            visible = false;
                        }
                    }

                    // Retete filter
                    if (reteteFiler && visible) {
                        const hasRetete = row.dataset.hasRetete === 'true';
                        if ((reteteFiler === 'cu-retete' && !hasRetete) ||
                            (reteteFiler === 'fara-retete' && hasRetete)) {
                            visible = false;
                        }
                    }

                    if (visible) {
                        row.classList.remove('d-none');
                        visibleRows.push(row);
                    } else {
                        row.classList.add('d-none');
                    }
                });

                // Sort visible rows
                visibleRows.sort((a, b) => {
                    switch (sortValue) {
                        case 'nume-desc':
                            return (b.dataset.nume + b.dataset.prenume).localeCompare(a.dataset.nume + a.dataset.prenume);
                        case 'retete-desc':
                            return parseInt(b.dataset.retetesCount) - parseInt(a.dataset.retetesCount);
                        case 'retete-asc':
                            return parseInt(a.dataset.retetesCount) - parseInt(b.dataset.retetesCount);
                        case 'recent':
                            return parseInt(b.dataset.id) - parseInt(a.dataset.id);
                        default: // nume-asc
                            return (a.dataset.nume + a.dataset.prenume).localeCompare(b.dataset.nume + b.dataset.prenume);
                    }
                });

                // Reorder rows in DOM
                const tbody = patientsTable.querySelector('tbody');
                visibleRows.forEach(row => {
                    tbody.appendChild(row);
                });

                // Show/hide no results
                if (visibleRows.length === 0) {
                    noResults.classList.remove('d-none');
                    patientsTable.parentElement.parentElement.classList.add('d-none');
                } else {
                    noResults.classList.add('d-none');
                    patientsTable.parentElement.parentElement.classList.remove('d-none');
                }
            }

            // Event listeners
            searchGeneral.addEventListener('input', filterAndSort);
            filterMedicament.addEventListener('change', filterAndSort);
            filterRetete.addEventListener('change', filterAndSort);
            sortBy.addEventListener('change', filterAndSort);

            clearFilters.addEventListener('click', function () {
                searchGeneral.value = '';
                filterMedicament.value = '';
                filterRetete.value = '';
                sortBy.value = 'nume-asc';
                filterAndSort();
            });

            // Initial load
            filterAndSort();
        });

        // Funcție pentru afișarea detaliilor în modal
        async function showPatientDetails(patientId) {
            const modal = new bootstrap.Modal(document.getElementById('patientDetailsModal'));
            const content = document.getElementById('patientDetailsContent');
            const editBtn = document.getElementById('editPatientBtn');

            // Show loading
            content.innerHTML = `
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Se încarcă...</span>
                    </div>
                </div>`;

            modal.show();

            try {
                const response = await fetch(`/Pacient/GetDetails/${patientId}`);
                const data = await response.json();

                content.innerHTML = `
                    <div class="row">
                        <div class="col-md-6">
                            <h6 class="text-muted">Informații personale</h6>
                            <table class="table table-sm">
                                <tr>
                                    <td><strong>Nume complet:</strong></td>
                                    <td>${data.nume} ${data.prenume}</td>
                                </tr>
                                ${data.cnp ? `<tr><td><strong>CNP:</strong></td><td>${data.cnp}</td></tr>` : ''}
                                ${data.nrTelefon ? `<tr><td><strong>Telefon:</strong></td><td>${data.nrTelefon}</td></tr>` : ''}
                            </table>

                            ${data.alteDetalii ? `
                            <h6 class="text-muted mt-3">Alte detalii</h6>
                            <div class="alert alert-light">
                                ${data.alteDetalii}
                            </div>` : ''}

                            ${data.urmatoareaVizita ? `
                            <h6 class="text-muted mt-3">Următoarea vizită</h6>
                            <div class="alert alert-info">
                                <i class="fas fa-calendar me-2"></i>
                                ${data.urmatoareaVizita}
                            </div>` : ''}
                        </div>

                        <div class="col-md-6">
                            <h6 class="text-muted">Medicamente asociate</h6>
                            ${data.medicamente.length > 0 ? `
                                <div class="d-flex flex-wrap gap-1 mb-3">
                                    ${data.medicamente.map(m => `<span class="badge bg-info">${m.nume}</span>`).join('')}
                                </div>
                            ` : '<p class="text-muted">Nu are medicamente asociate</p>'}
                        </div>
                    </div>

                    ${data.retete.length > 0 ? `
                    <div class="row mt-3">
                        <div class="col">
                            <h6 class="text-muted">Rețete recente (ultimele 5)</h6>
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Data</th>
                                            <th>Medicament</th>
                                            <th>Serie</th>
                                            <th>Nr. rețetă</th>
                                            <th>Următoarea vizită</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${data.retete.slice(0, 5).map(r => `
                                            <tr>
                                                <td>${r.data}</td>
                                                <td><span class="badge bg-light text-dark">${r.medicament}</span></td>
                                                <td>${r.serie || '-'}</td>
                                                <td>${r.nrReteta || '-'}</td>
                                                <td>${r.dataUrmatoareiVizite || '-'}</td>
                                            </tr>
                                        `).join('')}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    ` : ''}`;

                editBtn.onclick = () => {
                    window.location.href = `/Pacient/Edit/${patientId}`;
                };

            } catch (error) {
                content.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Eroare la încărcarea datelor pacientului.
                    </div>`;
            }
        }
    </script>
}

<style>
    /* Page header gradient - same as medicamente */
    .page-header-gradient {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 12px;
        color: white;
    }

    /* Mini stat cards in header */
    .stat-card-mini {
        background: rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(10px);
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        text-align: center;
    }

        .stat-card-mini .stat-number {
            font-size: 1.5rem;
            font-weight: 700;
            color: white;
        }

        .stat-card-mini .stat-label {
            font-size: 0.75rem;
            text-transform: uppercase;
            opacity: 0.9;
            color: white;
        }

    /* Pagination styling */
    .pagination .page-link {
        border-radius: 8px;
        margin: 0 2px;
        color: #667eea;
        border: 1px solid #dee2e6;
    }

    .pagination .page-item.active .page-link {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-color: transparent;
    }

    .pagination .page-link:hover {
        color: #667eea;
        background-color: #f8f9fa;
        border-color: #dee2e6;
    }

    /* Search box styling */
    .search-box {
        position: relative;
    }

    .search-icon {
        position: absolute;
        left: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
        z-index: 1;
    }

    /* Patient avatar styling */
    .patient-avatar .badge {
        width: 35px;
        height: 35px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.75rem;
        font-weight: bold;
    }

    /* Gradient badges */
    .bg-gradient-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .bg-gradient-info {
        background: linear-gradient(135deg, #0dcaf0 0%, #0aa2c0 100%);
    }

    .bg-gradient-success {
        background: linear-gradient(135deg, #198754 0%, #157347 100%);
    }

    .bg-gradient-secondary {
        background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
    }

    .table {
        font-size: 0.9rem;
    }

        .table thead th {
            border: none !important;
            font-weight: 600;
            font-size: 0.85rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            padding: 1rem 0.75rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
            color: white !important;
        }

        .table tbody td {
            vertical-align: middle;
            padding: 0.75rem;
            border-color: #f1f3f5;
        }

    .patient-row:hover {
        background-color: rgba(102, 126, 234, 0.05);
    }

    /* Empty state */
    .empty-state {
        padding: 3rem;
        background: #f8f9fa;
        border-radius: 12px;
    }

    /* Form controls */
    .form-control, .form-select {
        border-radius: 10px;
        border: 2px solid #e9ecef;
        font-size: 0.95rem;
        transition: all 0.2s ease;
    }

        .form-control:focus, .form-select:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }

    .form-control-lg, .form-select-lg {
        padding: 0.75rem 1rem;
    }

    /* Button improvements */
    .btn {
        border-radius: 8px;
        font-weight: 500;
        transition: all 0.2s ease;
    }

        .btn:hover {
            transform: translateY(-2px);
        }

    /* Modal styling */
    .modal-content {
        border-radius: 12px;
        border: none;
        box-shadow: 0 10px 40px rgba(0,0,0,0.15);
    }

    .modal-header {
        border-radius: 12px 12px 0 0;
    }

    /* Card footer */
    .card-footer {
        background-color: #f8f9fa !important;
        border-top: 1px solid #dee2e6 !important;
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .page-header-gradient {
            padding: 1rem;
        }

        .stat-card-mini {
            padding: 0.5rem 1rem;
        }

        .table {
            font-size: 0.8rem;
        }

        .pagination .page-link {
            padding: 0.375rem 0.75rem;
            font-size: 0.875rem;
        }
    }
</style>